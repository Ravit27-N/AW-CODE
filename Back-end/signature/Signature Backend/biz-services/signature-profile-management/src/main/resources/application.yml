server:
  shutdown: graceful
spring:
  main:
    allow-bean-definition-overriding: true
  mvc:
    servlet:
      path: /api
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  application:
    name: signature-profile
  cloud:
    openfeign:
      lazy-attributes-resolution: true
  sql:
    init:
      mode: always
  security:
    oauth2:
      client:
        provider:
          keycloak:
            authorization-uri: ${signature.security.keycloak-base-url}/realms/${signature.security.keycloak-realm}/protocol/openid-connect/authorize
            token-uri: ${signature.security.keycloak-base-url}/realms/${signature.security.keycloak-realm}/protocol/openid-connect/token
        registration:
          signature-profile:
            provider: keycloak
            client-id: ${SIGNATURE_PROFILE_CLIENT_ID}
            client-secret: ${SIGNATURE_PROFILE_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: openid
  # Datasource configuration
  jpa:
    database: mysql
    open-in-view: false
    generate-ddl: true
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          batch-size: 20
        enable_lazy_load_no_trans: true
        format-sql: true
        use-sql: true
        order-inserts: true
        order-updates: true
        bytecode:
          use-reflection-optimizer: true
        dialect: org.hibernate.dialect.MySQLDialect
        cache:
          use_second_level_cache: true
          use_query_cache: true
        javax:
          cache:
            missing_cache_strategy: create
            persistence:
              sharedCache:
                mode: ENABLE_SELECTIVE
    defer-datasource-initialization: true

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: ${spring.application.name}
      auto-commit: false
      maximum-pool-size: 5
      minimum-idle: 1
      idle-timeout: 30000
      max-lifetime: 200000
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        rewriteBatchedStatements: true
        rewriteBatchedInserts: true
  batch:
    jdbc:
      initialize-schema: always
    job:
      enabled: false

management:
  endpoint:
    info:
      enabled: true
  endpoints:
    web:
      exposure:
        include: info, health

signature:
  #Configure super admin for the system
  super-admin:
    email: ${SIGNATURE_SUPER_ADMIN_EMAIL}
    first-name: ${SIGNATURE_SUPER_ADMIN_FIRST_NAME}
    last-name: ${SIGNATURE_SUPER_ADMIN_LAST_NAME}
    password: ${SIGNATURE_SUPER_ADMIN_PASSWORD}
  #Configure microservice as resource server
  security:
    keycloak-realm: ${SIGNATURE_KEYCLOAK_REALM:signature-realm-name}
    keycloak-base-url: ${SIGNATURE_KEYCLOAK_URL:http://keycloak-host-name:8020}
    origins: ${SIGNATURE_ALLOWED_ORIGIN}
  #Configure microservice as an admin client of Keycloak
  keycloak:
    auth-server-url: ${signature.security.keycloak-base-url}
    realm: ${signature.security.keycloak-realm}
    resource: ${SIGNATURE_PROFILE_CLIENT_ID}
    secret: ${SIGNATURE_PROFILE_CLIENT_SECRET}
    technical-user-id: ${SIGNATURE_KEYCLOAK_TECHNICAL_USER_UUID}
  #Allowing for the feign client to retrieve the token header from keycloak and request to another microservice
  feign-client:
    client-registration-id: signature-profile
    client-id: ${SIGNATURE_PROFILE_CLIENT_ID}
    enabled: true
    clients:
      corporate-profile-url: ${SIGNATURE_CORPORATE_PROFILE_URL}
      project-url: ${SIGNATURE_PROJECT_URL}
      sftp-url: ${SIGNATURE_SFTP_URL}
      notification-url: ${SIGNATURE_NOTIFICATION_URL}
    contexts:
      corporate-profile-context-path: ${SIGNATURE_CORPORATE_PROFILE_CONTEXT_PATH}
      project-context-path: ${SIGNATURE_PROJECT_CONTEXT_PATH}
      notification-context-path: ${SIGNATURE_NOTIFICATION_CONTEXT_PATH}
      sftp-context-path: ${SIGNATURE_SFTP_CONTEXT_PATH}
  swagger:
    info:
      security-key: signature-profile
  api-ng:
    url: ${API_NG_HOST}
    context-path: ${API_NG_BASE_PATH}
    access-token: ${API_NG_ACCESS_TOKEN}
    certigna-user: ${API_NG_USER:pps#test}
    certigna-hash: ${API_NG_HASH:ySsPUR23}
    certigna-role: ${API_NG_ROLE:2}
    default-language: ${API_NG_DEFAULT_LANGUAGE:fr}
    test-file-path: ${API_NG_TEST_FILE}
    front-end-url: ${FRONT_END_URL}
  gravitee:
    base-url: ${GRAVITEE_BASE_PATH}
    organizations: ${GRAVITEE_ORGANIZATION}
    environment: ${GRAVITEE_ENV}
    username: ${GRAVITEE_USERNAME}
    password: ${GRAVITEE_PASSWORD}
    apiContextPath: ${DEFAULT_API_CONTEXT_PATH}
    applicationIds: ${SUBSCRIBE_APPLICATION_IDS}
    version: ${VERSION}
    status: ${APP_REQUEST_STATUS}
    page: ${APP_REQUEST_PAGE}
    pageSize: ${APP_REQUEST_PAGE_SIZE}
    exclude: ${APP_REQUEST_EXCLUDE}
#    swagger configuration
springdoc:
  swagger-ui:
    oauth:
      client-id: ${signature.keycloak.resource}
      client-secret: ${signature.keycloak.secret}
      realm: ${signature.keycloak.realm}